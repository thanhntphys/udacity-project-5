Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
        Default: "udacity-proj"

    EKSClusterName:
        Description: "The name of the cluster to create the node group in"
        Type: String
        Default: "udacity-cluster"

    EKSClusterVersion:
        Description: "The desired Kubernetes version for your cluster. If you don't specify a value here, the default version available in Amazon EKS is used."
        Type: String
        Default: "1.21"

    EKSIAMRoleArn:
        Description: "The Amazon Resource Name (ARN) of the IAM role that provides permissions for the Kubernetes control plane to make calls to AWS API operations on your behalf."
        Type: String
        Default: "arn:aws:iam::798426491631:role/EKSIAMRole"

    EKSNodegroupIAMRoleArn:
        Description: "The Amazon Resource Name (ARN) of the IAM role that provides permissions for the Kubernetes control plane to make calls to AWS API operations on your behalf."
        Type: String
        Default: "arn:aws:iam::798426491631:role/EKSNodegroupIAMRole"

    EKSNodegroupCapacityType:
        Description: "The capacity type of your managed node group"
        Type: String
        Default: "ON_DEMAND"

Resources:
    EKSSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Allow all
          VpcId:
            Fn::ImportValue:
              Fn::Sub: "${EnvironmentName}-VPCID"
          SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 0
              ToPort: 0
              CidrIp: 0.0.0.0/0
          SecurityGroupEgress:
            - IpProtocol: -1
              FromPort: -1
              ToPort: -1
              CidrIp: 0.0.0.0/0
          Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} EKS Security Group
          
    EKSCluster:
        Type: AWS::EKS::Cluster
        Properties:
          Name: !Sub ${EKSClusterName}
          Version: !Sub ${EKSClusterVersion}
          RoleArn: !Sub ${EKSIAMRoleArn}
          ResourcesVpcConfig:
            SecurityGroupIds:
              - !Ref EKSSecurityGroup
            SubnetIds:
              - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
              - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
            EndpointPublicAccess: true
            EndpointPrivateAccess: true
            PublicAccessCidrs: [ "0.0.0.0/0" ]
          Logging:
            ClusterLogging:
              EnabledTypes:
                - Type: api
                - Type: audit

    EKSNodegroup:
        Type: 'AWS::EKS::Nodegroup'
        Properties:
          ClusterName: !Ref EKSCluster
          NodeRole: !Sub ${EKSNodegroupIAMRoleArn}
          CapacityType: !Sub ${EKSNodegroupCapacityType}
          DiskSize: 20
          InstanceTypes: ["t3.medium"]
          ScalingConfig:
            MinSize: 2
            DesiredSize: 2
            MaxSize: 4
          Subnets:
            - Fn::ImportValue: !Sub "${EnvironmentName}-PRI2-SN"
            - Fn::ImportValue: !Sub "${EnvironmentName}-PRI1-SN"

    AddonVPCCNI:
        Type: AWS::EKS::Addon
        Properties: 
          AddonName: "vpc-cni"
          AddonVersion: "v1.10.1-eksbuild.1"
          ClusterName: !Ref EKSCluster

    AddonCoreDNS:
        Type: AWS::EKS::Addon
        Properties: 
          AddonName: "coredns"
          AddonVersion: "v1.8.4-eksbuild.1"
          ClusterName: !Ref EKSCluster

    AddonKubeProxy:
        Type: AWS::EKS::Addon
        Properties: 
          AddonName: "kube-proxy"
          AddonVersion: "v1.21.2-eksbuild.2"
          ClusterName: !Ref EKSCluster      

Outputs:
    Cluster:
        Value: !Ref EKSCluster
        Export:
            Name: !Sub ${EnvironmentName}-EKS-Cluster
    Arn:
        Value: !GetAtt EKSCluster.Arn
        Export:
            Name: !Sub ${EnvironmentName}-EKS-Arn
    Endpoint:
        Value: !GetAtt EKSCluster.Endpoint
        Export:
            Name: !Sub ${EnvironmentName}-EKS-Endpoint
    